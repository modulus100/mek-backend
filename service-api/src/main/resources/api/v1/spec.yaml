openapi: 3.0.0
info:
  description: "This is a sample server Petstore server. For this sample, you can\
    \ use the api key `special-key` to test the authorization filters."
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI Petstore
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://petstore.swagger.io/v2
tags:
  - description: Operations about user
    name: user
paths:
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      summary: Create user
      tags:
        - user
      x-content-type: application/json
      x-accepts:
        - application/json
      x-tags:
        - tag: user
  /user/createWithArray:
    post:
      description: ""
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      summary: Creates list of users with given input array
      tags:
        - user
      x-content-type: application/json
      x-accepts:
        - application/json
      x-tags:
        - tag: user
  /user/createWithList:
    post:
      description: ""
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      summary: Creates list of users with given input array
      tags:
        - user
      x-content-type: application/json
      x-accepts:
        - application/json
      x-tags:
        - tag: user
  /user/login:
    get:
      description: ""
      operationId: loginUser
      parameters:
        - description: The user name for login
          explode: true
          in: query
          name: username
          required: true
          schema:
            pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
            type: string
          style: form
        - description: The password for login in clear text
          explode: true
          in: query
          name: password
          required: true
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            Set-Cookie:
              description: Cookie authentication key for use with the `api_key` apiKey
                authentication.
              explode: false
              schema:
                example: AUTH_KEY=abcde12345; Path=/; HttpOnly
                type: string
              style: simple
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
        - user
      x-accepts:
        - application/json
        - application/xml
      x-tags:
        - tag: user
  /user/logout:
    get:
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      summary: Logs out current logged in user session
      tags:
        - user
      x-accepts:
        - application/json
      x-tags:
        - tag: user
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - description: The name that needs to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
        - api_key: []
      summary: Delete user
      tags:
        - user
      x-accepts:
        - application/json
      x-tags:
        - tag: user
    get:
      description: ""
      operationId: getUserByName
      parameters:
        - description: The name that needs to be fetched. Use user1 for testing.
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
        - user
      x-accepts:
        - application/json
        - application/xml
      x-tags:
        - tag: user
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - description: name that need to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
        - api_key: []
      summary: Updated user
      tags:
        - user
      x-content-type: application/json
      x-accepts:
        - application/json
      x-tags:
        - tag: user
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
      required: true
  schemas:
    User:
      description: A User who is purchasing from the pet store
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          description: User Status
          format: int32
          type: integer
      title: a User
      type: object
      xml:
        name: User
    ApiResponse:
      description: Describes the result of uploading an image resource
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      title: An uploaded response
      type: object
    updatePetWithForm_request:
      properties:
        name:
          description: Updated name of the pet
          type: string
        status:
          description: Updated status of the pet
          type: string
      type: object
    uploadFile_request:
      properties:
        additionalMetadata:
          description: Additional data to pass to server
          type: string
        file:
          description: file to upload
          format: binary
          type: string
      type: object
  securitySchemes:
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey