openapi: 3.0.0
info:
  description: "This is a sample server Petstore server. For this sample, you can\
    \ use the api key `special-key` to test the authorization filters."
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI Petstore
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://petstore.swagger.io/v2
tags:
  - description: Operations about user
    name: user
paths:
  /auth/register:
    post:
      description: Register a new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        description: Register request object
        required: true
      responses:
        "201":
          description: User successfully registered
      summary: Register user
      tags:
        - user
  x-content-type: application/json
  x-accepts:
    - application/json
  x-tags:
    - tag: user
  /auth/login:
    post:
      description: Log in a user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        description: Login request object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: Successful login
      summary: Log in user
      tags:
        - user
      x-content-type: application/json
      x-accepts:
        - application/json
      x-tags:
        - tag: user
  /auth/refresh-token:
    post:
      description: Refresh user token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        description: Token refresh request object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: Successful token refresh
      summary: Refresh token
      tags:
        - user
      x-content-type: application/json
      x-accepts:
        - application/json
      x-tags:
        - tag: user
  /auth/logout:
    post:
      description: Log out a user
      operationId: logoutUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenInvalidateRequest'
        description: Token invalidate request object
        required: true
      responses:
        "200":
          description: Successful logout
      summary: Log out user
      tags:
        - user
      x-content-type: application/json
      x-accepts:
        - application/json
      x-tags:
        - tag: user
components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 7
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
      required:
        - email
        - password
        - firstName
        - lastName
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
      required:
        - email
        - password
    TokenRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: "refreshToken123"
      required:
        - refreshToken
    TokenInvalidateRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: "refreshToken123"
      required:
        - refreshToken
    LoginResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/Token'
        user:
          $ref: '#/components/schemas/User'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
      required:
        - token
        - user
        - roles
    Token:
      type: object
      properties:
        accessToken:
          type: string
          example: "accessToken123"
        accessTokenExpiresAt:
          type: integer
          format: int64
          example: 1623673200
        refreshToken:
          type: string
          example: "refreshToken123"
      required:
        - accessToken
        - accessTokenExpiresAt
        - refreshToken
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
      required:
        - id
        - firstName
        - lastName
        - email
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        name:
          type: string
          example: "ROLE_USER"
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
      required:
        - id
        - name
        - permissions
    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        name:
          type: string
          example: "READ_PRIVILEGES"
      required:
        - id
        - name
